'use strict';var cov_1n78gmj45a=function(){var path="C:\\Users\\Angel Barusta\\Desktop\\nodejs\\iot_nodejs\\index.js",hash="265be5257c759f44572b39dae9f88a3da95e2f2b",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\Angel Barusta\\Desktop\\nodejs\\iot_nodejs\\index.js",statementMap:{"0":{start:{line:4,column:22},end:{line:4,column:41}},"1":{start:{line:5,column:24},end:{line:5,column:49}},"2":{start:{line:6,column:25},end:{line:6,column:51}},"3":{start:{line:8,column:17},end:{line:8,column:36}},"4":{start:{line:10,column:0},end:{line:48,column:1}},"5":{start:{line:11,column:4},end:{line:21,column:6}},"6":{start:{line:23,column:22},end:{line:23,column:43}},"7":{start:{line:24,column:23},end:{line:24,column:46}},"8":{start:{line:25,column:24},end:{line:25,column:48}},"9":{start:{line:27,column:4},end:{line:27,column:35}},"10":{start:{line:28,column:4},end:{line:28,column:37}},"11":{start:{line:30,column:3},end:{line:30,column:33}},"12":{start:{line:32,column:3},end:{line:34,column:4}},"13":{start:{line:33,column:7},end:{line:33,column:44}},"14":{start:{line:41,column:17},end:{line:41,column:19}},"15":{start:{line:42,column:19},end:{line:42,column:21}},"16":{start:{line:44,column:4},end:{line:47,column:5}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:10,column:17},end:{line:10,column:18}},loc:{start:{line:10,column:41},end:{line:48,column:1}},line:10}},branchMap:{"0":{loc:{start:{line:32,column:3},end:{line:34,column:4}},type:"if",locations:[{start:{line:32,column:3},end:{line:34,column:4}},{start:{line:32,column:3},end:{line:34,column:4}}],line:32}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},f:{"0":0},b:{"0":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const setupDatabase=(cov_1n78gmj45a.s[0]++,require('./lib/db'));const setupAgentModel=(cov_1n78gmj45a.s[1]++,require('./models/agent'));const setupMetricModel=(cov_1n78gmj45a.s[2]++,require('./models/metric'));const defaults=(cov_1n78gmj45a.s[3]++,require('defaults'));cov_1n78gmj45a.s[4]++;module.exports=async function(config){cov_1n78gmj45a.f[0]++;cov_1n78gmj45a.s[5]++;config=defaults(config,{dialect:'sqlite',pool:{max:10,min:0,idle:10000},query:{raw:true}});const sequelize=(cov_1n78gmj45a.s[6]++,setupDatabase(config));const AgentModel=(cov_1n78gmj45a.s[7]++,setupAgentModel(config));const MetricModel=(cov_1n78gmj45a.s[8]++,setupMetricModel(config));// definimos relacion agtente y metricas
cov_1n78gmj45a.s[9]++;AgentModel.hasMany(MetricModel);cov_1n78gmj45a.s[10]++;MetricModel.belongsTo(AgentModel);// espera hasta que si se conecte adecuadamente
cov_1n78gmj45a.s[11]++;await sequelize.authenticate();// configuracion de la base de datos
cov_1n78gmj45a.s[12]++;if(config.setup){cov_1n78gmj45a.b[0][0]++;cov_1n78gmj45a.s[13]++;await sequelize.sync({force:true});// si la db existe borrara la db nueva
}else{cov_1n78gmj45a.b[0][1]++;}const Agent=(cov_1n78gmj45a.s[14]++,{});const Metric=(cov_1n78gmj45a.s[15]++,{});cov_1n78gmj45a.s[16]++;return{Agent,Metric};};