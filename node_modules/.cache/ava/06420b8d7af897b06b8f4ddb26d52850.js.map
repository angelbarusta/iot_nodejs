{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","config","logging","MetricStub","belongsTo","spy","AgentStub","db","sandbox","beforeEach","createSandbox","hasMany","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith"],"mappings":";AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;;AAEA,IAAIG,SAAS;AACXC,WAAS,YAAY,CAAE;AADZ,CAAb;;AAIA,IAAIC,aAAa;AACfC,aAAWL,MAAMM,GAAN,EADI,CACO;AADP,CAAjB;;AAIA,IAAIC,YAAY,IAAhB;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,IAAd;;AAEAX,KAAKY,UAAL,CAAgB,YAAY;AAC1BD,YAAUT,MAAMW,aAAhB;;AAEAJ,cAAY;AACV;AACAK,aAASH,QAAQH,GAAR;AAFC,GAAZ;;AAKA,QAAMO,gBAAgBZ,WAAW,KAAX,EAAkB;AACtC,sBAAkB,MAAMM,SADc,EACH;AACnC,uBAAmB,MAAMH;AAFa,GAAlB,CAAtB;;AAKAI,OAAK,MAAMK,cAAcX,MAAd,CAAX;AACD,CAdD;;AAgBAJ,KAAKgB,SAAL,CAAe,MAAM;AACnBL,aAAWT,MAAMS,OAAN,CAAcM,OAAd,EAAX;AACD,CAFD;;AAIAjB,KAAK,OAAL,EAAckB,KAAK;AAAA;;AAAE;AACnBA,IAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmB,4BAAnB,EADiB,CACgC;AAClD,CAFD;AAGApB,KAAKqB,MAAL,CAAY,OAAZ,EAAqBH,KAAK;AAAA;AAAA;AAAA;;AACxBA,IAAEI,IAAF,yBAAO,gEAAUR,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,kCAAjC;AACAL,IAAEI,IAAF,yBAAO,uEAAUR,OAAV,+BAAkBU,UAAlB,aAA6BlB,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiD,0BAAjD;AACAY,IAAEI,IAAF,yBAAO,iEAAWf,SAAX,wBAAqBgB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,qCAApC;AACD,CAJD","file":"agent-tests.js","sourcesContent":["'use-strict'\r\n\r\nconst test = require('ava')\r\nconst sinon = require('sinon')\r\nconst proxyquire = require('proxyquire')\r\n\r\nlet config = {\r\n  logging: function () {}\r\n}\r\n\r\nlet MetricStub = {\r\n  belongsTo: sinon.spy()// un spy es un funcion que nos dice datos sobre la funcion, es un chicmoso vamos\r\n}\r\n\r\nlet AgentStub = null\r\nlet db = null\r\nlet sandbox = null\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.createSandbox\r\n\r\n  AgentStub = {\r\n    // un sandbox es un ambiente especifico que solo funciona para este caso en particular\r\n    hasMany: sandbox.spy()\r\n  }\r\n\r\n  const setupDatabase = proxyquire('../', {\r\n    './models/agent': () => AgentStub, // las mismas rutas que las que estan e declaradas en index.js\r\n    './models/metric': () => MetricStub\r\n  })\r\n\r\n  db = await setupDatabase(config)\r\n})\r\n\r\ntest.afterEach(() => {\r\n  sandbox && sinon.sandbox.restore()\r\n})\r\n\r\ntest('Agent', t => { // verificacion de que Agent exista\r\n  t.truthy(db.Agent, 'Agent service should exist') // si se resulve el valor a verdadero\n})\r\ntest.serial('Setup', t => {\r\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany fue ejecutada')\r\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argumento de esa funcion')\r\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo fue ejecutada')\r\n})\r\n"]}