{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","id","uuid","AgentStub","db","sandbox","uuidArgs","where","beforeEach","createSandbox","hasMany","findOne","stub","withArgs","returns","Promise","resolve","byUuid","findById","byId","setupDatabase","afterEach","t","restore","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual","createOrUpdate"],"mappings":"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","file":"agent-tests.js","sourcesContent":["'use-strict'\r\n\r\nconst test = require('ava')\r\nconst sinon = require('sinon')\r\nconst proxyquire = require('proxyquire')\r\nconst agentFixtures = require('./fixtures/agent')\r\n\r\nlet config = {\r\n  logging: function () {}\r\n}\r\n\r\nlet MetricStub = {\r\n  belongsTo: sinon.spy()// un spy es un funcion que nos dice datos sobre la funcion, es un chicmoso vamos\r\n}\r\n\r\nlet single = Object.assign({}, agentFixtures.single)\r\nlet id = 1\r\nlet uuid = 'yyy-yyy-yyy'\r\nlet AgentStub = null\r\nlet db = null\r\nlet sandbox = null\r\n\r\nlet uuidArgs = {\r\n  where: {\r\n    uuid\r\n  }\r\n}\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.createSandbox()\r\n\r\n  AgentStub = {\r\n    // un sandbox es un ambiente especifico que solo funciona para este caso en particular\r\n    hasMany: sandbox.spy()\r\n  }\r\n\r\n  //Model findOne Stub\r\n  AgentStub.findOne = sandbox.stub()\r\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\r\n\r\n\r\n\r\n\r\n\r\n  //Modelo findById Stub\r\n  AgentStub.findById = sandbox.stub()\r\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\r\n\r\n  const setupDatabase = proxyquire('../', {\r\n    './models/agent': () => AgentStub, // las mismas rutas que las que estan e declaradas en index.js\r\n    './models/metric': () => MetricStub\r\n  })\r\n\r\n  db = await setupDatabase(config)\r\n})\r\n\r\ntest.afterEach(t => {\r\n  sandbox && sandbox.restore()\r\n})\r\n\r\ntest('Agent', t => { // verificacion de que Agent exista\r\n  t.truthy(db.Agent, 'Agent service should exist') // si se resulve el valor a verdadero\r\n})\r\ntest.serial('Setup', t => {\r\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany fue ejecutada')\r\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argumento de esa funcion')\r\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo fue ejecutada')\r\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argumentos de esa funcion')\r\n})\r\n\r\ntest.serial('Agent#findById', async t => {\r\n  let agent = await db.Agent.findById(id)\r\n\r\n  t.true(AgentStub.findById.called, 'findById debera llamar al modelo')\r\n  t.true(AgentStub.findById.calledOnce, 'findById debera ser llamada una vez')\r\n  t.true(AgentStub.findById.calledWith(id), 'findById debera llamar con los argumentos que son')\r\n\r\n  t.deepEqual(agent, agentFixtures.byId(id), 'deberia ser el mismo')\r\n})\r\n\r\ntest.serial('Agent#createOrUpdate - exists', async t => {\r\n  let agent = await db.Agent.createOrUpdate(single)\r\n\r\n  t.deepEqual(agent,  single, 'el agent deberia ser el mismo')\r\n})\r\n"]}