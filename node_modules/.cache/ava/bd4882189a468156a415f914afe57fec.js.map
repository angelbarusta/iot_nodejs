{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","connectedArgs","where","connected","usernameArgs","username","uuidArgs","uuid","newAgent","name","hostname","pid","beforeEach","sandbox","createSandbox","AgentStub","hasMany","create","stub","withArgs","returns","Promise","resolve","toJSON","update","findById","id","byId","findOne","byUuid","findAll","all","iot","setupDatabase","db","afterEach","t","restore","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual","createOrUpdate","agents","findConnected","is","length","findByUsername","calledTwice"],"mappings":"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","file":"agent-tests.js","sourcesContent":["'use-strict'\r\n\r\nconst test = require('ava')\r\nconst sinon = require('sinon')\r\nconst proxyquire = require('proxyquire')\r\nconst agentFixtures = require('./fixtures/agent')\r\n//----------------------------------------------------------\r\nlet config = {\r\n  logging: function () {}\r\n}\r\n//----------------------------------------------------\r\n\r\nlet MetricStub = {\r\n  belongsTo: sinon.spy()// un spy es un funcion que nos dice datos sobre la funcion, es un chicmoso vamos\r\n}\r\n//-------------------------------------------------------------\r\nlet single = Object.assign({}, agentFixtures.single)\r\n//-----------------------------------------------------------------\r\nlet connectedArgs = {\r\n  where: {  connected: true }\r\n}\r\n//-------------------------------------------------------------\r\nlet usernameArgs = {\r\n  where: { username: 'iot', connected: true }\r\n}\r\n//------------------------------------------------------------\r\nlet uuidArgs = {\r\n  where: { uuid }\r\n}\r\n//-------------------------------------------------------------\r\nlet newAgent = {\r\n  uuid: '123-123-123',\r\n  name: 'test',\r\n  username: 'test',\r\n  hostname: 'test',\r\n  pid: 0,\r\n  connected: false\r\n}\r\n\r\n/*let id = 1\r\nlet uuid = 'yyy-yyy-yyy'\r\nlet AgentStub = null\r\nlet db = null\r\nlet sandbox = null\r\n\r\n/*let uuidArgs = {\r\n  where: {\r\n    uuid\r\n  }\r\n}*/\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.createSandbox()\r\n\r\n  AgentStub = {\r\n    // un sandbox es un ambiente especifico que solo funciona para este caso en particular\r\n    hasMany: sandbox.spy()\r\n  }\r\n\r\n  //Model create Stub\r\n  AgentStub.create = sandbox.stub()\r\n  AgentStub.create.withArgs(newAgent).returns(Promise.resolve({\r\n    toJSON () { return newAgent }\r\n  }))\r\n\r\n  //Model update Stub\r\n  AgentStub.update = sandbox.stub()\r\n  AgentStub.update.withArgs(single, uuidArgs).returns(Promise.resolve(single))\r\n\r\n\r\n   //Modelo findById Stub\r\n   AgentStub.findById = sandbox.stub()\r\n   AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\r\n\r\n\r\n  //Model findOne Stub\r\n  AgentStub.findOne = sandbox.stub()\r\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\r\n\r\n\r\n  //Model findAll Stub \r\n  AgentStub.findAll = sandbox.stub()\r\n  AgentStub.findAll.withArgs().returns(Promise.resolve(agentFixtures.all))\r\n  AgentStub.findAll.withArgs(connectedArgs).returns(Promise.resolve(agentFixtures.connected))\r\n  AgentStub.findAll.withArgs(usernameArgs).returns(Promise.resolve(agentFixtures.iot))\r\n\r\n  const setupDatabase = proxyquire('../', {\r\n    './models/agent': () => AgentStub, // las mismas rutas que las que estan e declaradas en index.js\r\n    './models/metric': () => MetricStub\r\n  })\r\n\r\n  db = await setupDatabase(config)\r\n})\r\n\r\ntest.afterEach(t => {\r\n  sandbox && sandbox.restore()\r\n})\r\n\r\ntest('Agent', t => { // verificacion de que Agent exista\r\n  t.truthy(db.Agent, 'Agent service should exist') // si se resulve el valor a verdadero\r\n})\r\n\r\n\r\ntest.serial('Setup', t => {\r\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany fue ejecutada')\r\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argumento de esa funcion')\r\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo fue ejecutada')\r\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argumentos de esa funcion')\r\n})\r\n\r\n\r\n\r\ntest.serial('Agent#findById', async t => {\r\n  let agent = await db.Agent.findById(id)\r\n\r\n  t.true(AgentStub.findById.called, 'findById debera llamar al modelo')\r\n  t.true(AgentStub.findById.calledOnce, 'findById debera ser llamada una vez')\r\n  t.true(AgentStub.findById.calledWith(id), 'findById debera llamar con los argumentos que son')\r\n\r\n  t.deepEqual(agent, agentFixtures.byId(id), 'deberia ser el mismo')\r\n})\r\n\r\n\r\n\r\ntest.serial('Agent#createOrUpdate - new', async t => {\r\n  let agent = await db.Agent.createOrUpdate(newAgent)\r\n\r\n  t.true(AgentStub.findOne.called, 'findOne debera llamar una vez al objeto')\r\n  t.true(AgentStub.findOne.calledOnce, 'findOne debera llamar una vez')\r\n  t.true(AgentStub.findOne.calledWith({\r\n    where: { uuid: newAgent.uuid }\r\n  }), 'findOne debera llamar los argumentos de uuid args')\r\n  t.true(AgentStub.create.called, 'create debera llamar un modelo')\r\n  t.true(AgentStub.create.calledOnce, 'create debera llamarse una vez')\r\n  t.true(AgentStub.create.calledWith(newAgent), 'create debera llamarse con argumentos')\r\n\r\n  t.deepEqual(agent. newAgent,'agent debera llamarse solo el mismo')\r\n})\r\n\r\n\r\n\r\ntest.serial('Agent#findConnected', async t => {\r\n  let agents = await db.Agent.findConnected()\r\n\r\n  t.true(AgentStub.findAll.called, 'findAll debera llamar al modelo')\r\n  t.true(AgentStub.findAll.calledOnce, 'findAll debera ser llamado una sola vez')\r\n  t.true(AgentStub.findAll.calledWith(connectedArgs), 'findAll debera ser llamado con argumentos')\r\n\r\n  t.is(agents.length, agentFixtures.connected.length, 'agents deberanser llamado')\r\n  t.deepEqual(agents, agentFixtures.connected, 'agents debera ser el mismo')\r\n})\r\n\r\n\r\n\r\ntest.serial('Agent#findAll', async t => {\r\n  let agents = await db.Agent.findAll()\r\n\r\n  t.true(AgentStub.findAll.called, 'findAll debera ser llamado')\r\n  t.true(AgentStub.findAll.calledOnce, 'findAll debera ser llamado una sola vez')\r\n  t.true(AgentStub.findAll.calledWith(), 'findAll debera ser llamado con argumentos')\r\n\r\n  t.is(agents.length, agentFixtures.all.length, 'agents deberan ser los mismos')\r\n  t.deepEqual(agents,agentFixtures.all, 'agents deberan ser los mismos')\r\n})\r\n\r\n\r\n\r\ntest.serial('Agent#findByUsername', async t => {\r\n  let agents = await db.Agent.findByUsername('iot')\r\n\r\n  t.true(AgentStub-findAll.called, 'findAll debera llamar el modelo')\r\n  t.true(AgentStub.findAll.calledOnce, 'findAll debera ser llamado una sola vez')\r\n  t.true(AgentStub.findAll.calledWith(usernameArgs), 'findAll debera ser llamado con argumentos')\r\n\r\n  t.is(agents.length, agentFixtures.iot.length, 'agents deneran ser los mismos')\r\n  t.deepEqual(agents,agentFixtures.iot, 'agents deberan ser los mismos')\r\n})\r\n\r\n\r\n\r\ntest.serial('Agent#createOrUpdate - exists', async t => {\r\n  let agent = await db.Agent.createOrUpdate(single)\r\n\r\n  t.true(AgentStub.findOne.called,'findOne debera llamar al modelo')\r\n  t.true(AgentStub.findOne.calledTwice, 'findOne debera llamar dos veces')\r\n  t.true(AgentStub.update.calledOnce, 'update debera ser llamado una sola vez')\r\n\r\n  t.deepEqual(agent,  single, 'el agent deberia ser el mismo')\r\n})\r\n"]}