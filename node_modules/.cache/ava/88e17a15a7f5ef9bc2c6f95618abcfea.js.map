{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","id","AgentStub","db","sandbox","beforeEach","createSandbox","hasMany","findById","stub","setupDatabase","afterEach","t","restore","truthy","Agent","serial","true","called","calledWith","agent","deepEqual","byId"],"mappings":";AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;AACA,MAAMG,gBAAgBH,QAAQ,kBAAR,CAAtB;;AAEA,IAAII,SAAS;AACXC,WAAS,YAAY,CAAE;AADZ,CAAb;;AAIA,IAAIC,aAAa;AACfC,aAAWN,MAAMO,GAAN,EADI,CACO;AADP,CAAjB;;AAIA,IAAIC,SAASC,OAAOC,MAAP,CAAc,EAAd,EAAkBR,cAAcM,MAAhC,CAAb;AACA,IAAIG,KAAK,CAAT;AACA,IAAIC,YAAY,IAAhB;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,IAAd;;AAEAhB,KAAKiB,UAAL,CAAgB,YAAY;AAC1BD,YAAUd,MAAMgB,aAAN,EAAV;;AAEAJ,cAAY;AACV;AACAK,aAASH,QAAQP,GAAR;;AAGX;AALY,GAAZ,CAMAK,UAAUM,QAAV,GAAqBJ,QAAQK,IAAR,EAArB;;AAEA,QAAMC,gBAAgBnB,WAAW,KAAX,EAAkB;AACtC,sBAAkB,MAAMW,SADc,EACH;AACnC,uBAAmB,MAAMP;AAFa,GAAlB,CAAtB;;AAKAQ,OAAK,MAAMO,cAAcjB,MAAd,CAAX;AACD,CAjBD;;AAmBAL,KAAKuB,SAAL,CAAeC,KAAK;AAClBR,aAAWA,QAAQS,OAAR,EAAX;AACD,CAFD;;AAIAzB,KAAK,OAAL,EAAcwB,KAAK;AAAA;;AAAE;AACnBA,IAAEE,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmB,4BAAnB,EADiB,CACgC;AAClD,CAFD;AAGA3B,KAAK4B,MAAL,CAAY,OAAZ,EAAqBJ,KAAK;AAAA;AAAA;AAAA;AAAA;;AACxBA,IAAEK,IAAF,yBAAO,gEAAUV,OAAV,wBAAkBW,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,kCAAjC;AACAN,IAAEK,IAAF,yBAAO,uEAAUV,OAAV,+BAAkBY,UAAlB,aAA6BxB,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiD,0BAAjD;AACAiB,IAAEK,IAAF,yBAAO,iEAAWrB,SAAX,wBAAqBsB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,qCAApC;AACAN,IAAEK,IAAF,yBAAO,wEAAWrB,SAAX,+BAAqBuB,UAArB,aAAgCjB,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmD,2BAAnD;AACD,CALD;;AAOAd,KAAK4B,MAAL,CAAY,gBAAZ,EAA8B,MAAMJ,CAAN,IAAW;AACvC,MAAIQ,QAAQ,MAAMjB,GAAGY,KAAH,CAASP,QAAT,CAAkBP,EAAlB,CAAlB;;AAEAW,IAAES,SAAF,CAAYD,KAAZ,EAAmB5B,cAAc8B,IAAd,CAAmBrB,EAAnB,CAAnB,EAA2C,sBAA3C;AACD,CAJD","file":"agent-tests.js","sourcesContent":["'use-strict'\r\n\r\nconst test = require('ava')\r\nconst sinon = require('sinon')\r\nconst proxyquire = require('proxyquire')\r\nconst agentFixtures = require('./fixtures/agent')\r\n\r\nlet config = {\r\n  logging: function () {}\r\n}\r\n\r\nlet MetricStub = {\r\n  belongsTo: sinon.spy()// un spy es un funcion que nos dice datos sobre la funcion, es un chicmoso vamos\r\n}\r\n\r\nlet single = Object.assign({}, agentFixtures.single)\r\nlet id = 1\r\nlet AgentStub = null\r\nlet db = null\r\nlet sandbox = null\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.createSandbox()\r\n\r\n  AgentStub = {\r\n    // un sandbox es un ambiente especifico que solo funciona para este caso en particular\r\n    hasMany: sandbox.spy()\r\n  }\r\n\r\n  //Modelo findById Stub\r\n  AgentStub.findById = sandbox.stub()\r\n\r\n  const setupDatabase = proxyquire('../', {\r\n    './models/agent': () => AgentStub, // las mismas rutas que las que estan e declaradas en index.js\r\n    './models/metric': () => MetricStub\r\n  })\r\n\r\n  db = await setupDatabase(config)\r\n})\r\n\r\ntest.afterEach(t => {\r\n  sandbox && sandbox.restore()\r\n})\r\n\r\ntest('Agent', t => { // verificacion de que Agent exista\r\n  t.truthy(db.Agent, 'Agent service should exist') // si se resulve el valor a verdadero\r\n})\r\ntest.serial('Setup', t => {\r\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany fue ejecutada')\r\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argumento de esa funcion')\r\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo fue ejecutada')\r\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argumentos de esa funcion')\r\n})\r\n\r\ntest.serial('Agent#findById', async t => {\r\n  let agent = await db.Agent.findById(id)\r\n\r\n  t.deepEqual(agent, agentFixtures.byId(id), 'deberia ser el mismo')\r\n})\r\n"]}