{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","object","assign","id","AgentStub","db","sandbox","beforeEach","createSandbox","hasMany","setupDatabase","afterEach","t","restore","truthy","Agent","serial","true","called","calledWith","agent","findById","deepEqual"],"mappings":";AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;;AAEA,MAAMG,gBAAgBH,QAAQ,kBAAR,CAAtB;;AAEA,IAAII,SAAS;AACTC,aAAQ,YAAY,CAAE;AADb,CAAb;;AAIA,IAAIC,aAAa;AACbC,eAAWN,MAAMO,GAAN,EADE,CACS;AADT,CAAjB;;AAIA,IAAIC,SAASC,OAAOC,MAAP,CAAc,EAAd,EAAkBR,cAAcM,MAAhC,CAAb;AACA,IAAIG,KAAK,CAAT;AACA,IAAIC,YAAY,IAAhB;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,IAAd;;AAEAhB,KAAKiB,UAAL,CAAgB,YAAY;AACxBD,cAAUd,MAAMgB,aAAN,EAAV;;AAEAJ,gBAAY;AACR;AACAK,iBAASH,QAAQP,GAAR;AAFD,KAAZ;;AAMA,UAAMW,gBAAgBjB,WAAW,KAAX,EAAkB;AACpC,0BAAkB,MAAMW,SADY,EACA;AACpC,2BAAmB,MAAMP;AAFW,KAAlB,CAAtB;;AAMAQ,SAAK,MAAMK,cAAcf,MAAd,CAAX;AACH,CAhBD;;AAkBAL,KAAKqB,SAAL,CAAeC,KAAK;AAChBN,eAAWA,QAAQO,OAAR,EAAX;AACH,CAFD;;AAIAvB,KAAK,OAAL,EAAcsB,KAAK;AAAA;;AAAE;AACjBA,MAAEE,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmB,4BAAnB,EADe,CACkC;AAEpD,CAHD;AAIAzB,KAAK0B,MAAL,CAAY,OAAZ,EAAqBJ,KAAK;AAAA;AAAA;AAAA;AAAA;;AACtBA,MAAEK,IAAF,yBAAO,gEAAUR,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAgC,kCAAhC;AACAN,MAAEK,IAAF,yBAAO,uEAAUR,OAAV,+BAAkBU,UAAlB,aAA6BtB,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAgD,0BAAhD;AACAe,MAAEK,IAAF,yBAAO,iEAAWnB,SAAX,wBAAqBoB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmC,qCAAnC;AACAN,MAAEK,IAAF,yBAAO,wEAAWnB,SAAX,+BAAqBqB,UAArB,aAAgCf,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmD,2BAAnD;AACH,CALD;;AAOAd,KAAK0B,MAAL,CAAY,gBAAZ,EAA8B,MAAMJ,CAAN,IAAW;AACvC,QAAIQ,QAAQ,MAAMf,GAAGU,KAAH,CAASM,QAAT,CAAkBlB,EAAlB,CAAlB;;AAEAS,MAAEU,SAAF,CAAYF,KAAZ,EAAmB1B,cAAc2B,QAAd,CAAuBlB,EAAvB,CAAnB,EAA8C,sBAA9C;AACD,CAJD","file":"agent-tests.js","sourcesContent":["'use-strict'\r\n\r\nconst test = require('ava')\r\nconst sinon = require('sinon')\r\nconst proxyquire = require('proxyquire')\r\n\r\nconst agentFixtures = require('./fixtures/agent')\r\n\r\nlet config = {\r\n    logging:function () {}\r\n}\r\n\r\nlet MetricStub = {\r\n    belongsTo: sinon.spy()// un spy es un funcion que nos dice datos sobre la funcion, es un chicmoso vamos \r\n}\r\n\r\nlet single = object.assign({}, agentFixtures.single)\r\nlet id = 1\r\nlet AgentStub = null\r\nlet db = null\r\nlet sandbox = null\r\n\r\ntest.beforeEach(async () => {\r\n    sandbox = sinon.createSandbox()\r\n\r\n    AgentStub = {\r\n        //un sandbox es un ambiente especifico que solo funciona para este caso en particular\r\n        hasMany: sandbox.spy()\r\n    }\r\n\r\n\r\n    const setupDatabase = proxyquire('../', {\r\n        './models/agent': () => AgentStub,  // las mismas rutas que las que estan e declaradas en index.js\r\n        './models/metric': () => MetricStub \r\n    })\r\n\r\n\r\n    db = await setupDatabase(config)\r\n}) \r\n\r\ntest.afterEach(t => {\r\n    sandbox && sandbox.restore()\r\n})\r\n\r\ntest('Agent', t => { // verificacion de que Agent exista\r\n    t.truthy(db.Agent, 'Agent service should exist') // si se resulve el valor a verdadero\r\n\r\n})\r\ntest.serial('Setup', t => {\r\n    t.true(AgentStub.hasMany.called,'AgentModel.hasMany fue ejecutada')\r\n    t.true(AgentStub.hasMany.calledWith(MetricStub),'Argumento de esa funcion')\r\n    t.true(MetricStub.belongsTo.called,'MetricModel.belongsTo fue ejecutada')\r\n    t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argumentos de esa funcion')\r\n})\r\n\r\ntest.serial('Agent#findById', async t => {\r\n  let agent = await db.Agent.findById(id)\r\n\r\n  t.deepEqual(agent, agentFixtures.findById(id),'deberia ser el mismo')\r\n})\r\n"]}