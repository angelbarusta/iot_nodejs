var baseWrapperValue = require('./_baseWrapperValue')

var getView = require('./_getView')

var isArray = require('./isArray')

/** Used to indicate the type of lazy iteratees. */
var LAZY_FILTER_FLAG = 1

var LAZY_MAP_FLAG = 2

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min

/**
 * Extracts the unwrapped value from its lazy wrapper.
 *
 * @private
 * @name value
 * @memberOf LazyWrapper
 * @returns {*} Returns the unwrapped value.
 */
function lazyValue () {
  var array = this.__wrapped__.value()

  var dir = this.__dir__

  var isArr = isArray(array)

  var isRight = dir < 0

  var arrLength = isArr ? array.length : 0

  var view = getView(0, arrLength, this.__views__)

  var start = view.start

  var end = view.end

  var length = end - start

  var index = isRight ? end : (start - 1)

  var iteratees = this.__iteratees__

  var iterLength = iteratees.length

  var resIndex = 0

  var takeCount = nativeMin(length, this.__takeCount__)

  if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
    return baseWrapperValue(array, this.__actions__)
  }
  var result = []

  outer:
  while (length-- && resIndex < takeCount) {
    index += dir

    var iterIndex = -1

    var value = array[index]

    while (++iterIndex < iterLength) {
      var data = iteratees[iterIndex]

      var iteratee = data.iteratee

      var type = data.type

      var computed = iteratee(value)

      if (type == LAZY_MAP_FLAG) {
        value = computed
      } else if (!computed) {
        if (type == LAZY_FILTER_FLAG) {
          continue outer
        } else {
          break outer
        }
      }
    }
    result[resIndex++] = value
  }
  return result
}

module.exports = lazyValue
