var apply = require('./_apply')

var createCtor = require('./_createCtor')

var root = require('./_root')

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1

/**
 * Creates a function that wraps `func` to invoke it with the `this` binding
 * of `thisArg` and `partials` prepended to the arguments it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} partials The arguments to prepend to those provided to
 *  the new function.
 * @returns {Function} Returns the new wrapped function.
 */
function createPartial (func, bitmask, thisArg, partials) {
  var isBind = bitmask & WRAP_BIND_FLAG

  var Ctor = createCtor(func)

  function wrapper () {
    var argsIndex = -1

    var argsLength = arguments.length

    var leftIndex = -1

    var leftLength = partials.length

    var args = Array(leftLength + argsLength)

    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func

    while (++leftIndex < leftLength) {
      args[leftIndex] = partials[leftIndex]
    }
    while (argsLength--) {
      args[leftIndex++] = arguments[++argsIndex]
    }
    return apply(fn, isBind ? thisArg : this, args)
  }
  return wrapper
}

module.exports = createPartial
