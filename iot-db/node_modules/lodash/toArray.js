var Symbol = require('./_Symbol')

var copyArray = require('./_copyArray')

var getTag = require('./_getTag')

var isArrayLike = require('./isArrayLike')

var isString = require('./isString')

var iteratorToArray = require('./_iteratorToArray')

var mapToArray = require('./_mapToArray')

var setToArray = require('./_setToArray')

var stringToArray = require('./_stringToArray')

var values = require('./values')

/** `Object#toString` result references. */
var mapTag = '[object Map]'

var setTag = '[object Set]'

/** Built-in value references. */
var symIterator = Symbol ? Symbol.iterator : undefined

/**
 * Converts `value` to an array.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Array} Returns the converted array.
 * @example
 *
 * _.toArray({ 'a': 1, 'b': 2 });
 * // => [1, 2]
 *
 * _.toArray('abc');
 * // => ['a', 'b', 'c']
 *
 * _.toArray(1);
 * // => []
 *
 * _.toArray(null);
 * // => []
 */
function toArray (value) {
  if (!value) {
    return []
  }
  if (isArrayLike(value)) {
    return isString(value) ? stringToArray(value) : copyArray(value)
  }
  if (symIterator && value[symIterator]) {
    return iteratorToArray(value[symIterator]())
  }
  var tag = getTag(value)

  var func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values)

  return func(value)
}

module.exports = toArray
