var DataView = require('./_DataView')

var Map = require('./_Map')

var Promise = require('./_Promise')

var Set = require('./_Set')

var WeakMap = require('./_WeakMap')

var baseGetTag = require('./_baseGetTag')

var toSource = require('./_toSource')

/** `Object#toString` result references. */
var mapTag = '[object Map]'

var objectTag = '[object Object]'

var promiseTag = '[object Promise]'

var setTag = '[object Set]'

var weakMapTag = '[object WeakMap]'

var dataViewTag = '[object DataView]'

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView)

var mapCtorString = toSource(Map)

var promiseCtorString = toSource(Promise)

var setCtorString = toSource(Set)

var weakMapCtorString = toSource(WeakMap)

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map()) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set()) != setTag) ||
    (WeakMap && getTag(new WeakMap()) != weakMapTag)) {
  getTag = function (value) {
    var result = baseGetTag(value)

    var Ctor = result == objectTag ? value.constructor : undefined

    var ctorString = Ctor ? toSource(Ctor) : ''

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag
        case mapCtorString: return mapTag
        case promiseCtorString: return promiseTag
        case setCtorString: return setTag
        case weakMapCtorString: return weakMapTag
      }
    }
    return result
  }
}

module.exports = getTag
