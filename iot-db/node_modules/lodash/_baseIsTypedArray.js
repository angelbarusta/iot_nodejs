var baseGetTag = require('./_baseGetTag')

var isLength = require('./isLength')

var isObjectLike = require('./isObjectLike')

/** `Object#toString` result references. */
var argsTag = '[object Arguments]'

var arrayTag = '[object Array]'

var boolTag = '[object Boolean]'

var dateTag = '[object Date]'

var errorTag = '[object Error]'

var funcTag = '[object Function]'

var mapTag = '[object Map]'

var numberTag = '[object Number]'

var objectTag = '[object Object]'

var regexpTag = '[object RegExp]'

var setTag = '[object Set]'

var stringTag = '[object String]'

var weakMapTag = '[object WeakMap]'

var arrayBufferTag = '[object ArrayBuffer]'

var dataViewTag = '[object DataView]'

var float32Tag = '[object Float32Array]'

var float64Tag = '[object Float64Array]'

var int8Tag = '[object Int8Array]'

var int16Tag = '[object Int16Array]'

var int32Tag = '[object Int32Array]'

var uint8Tag = '[object Uint8Array]'

var uint8ClampedTag = '[object Uint8ClampedArray]'

var uint16Tag = '[object Uint16Array]'

var uint32Tag = '[object Uint32Array]'

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {}
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray (value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)]
}

module.exports = baseIsTypedArray
